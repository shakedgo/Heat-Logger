# Heat-Logger Project

## Overview
A smart heating time prediction system that learns from user feedback to optimize shower heating times. The system uses an advanced heuristic-based algorithm to predict optimal heating times based on temperature, shower duration, and historical user satisfaction data.

## Current State: Phase 2 Complete âœ…

### What We Have:
1. **Frontend (Vue 3 + Options API)**:
   - âœ… Complete UI with InputForm, LatestResult, HistoryList components
   - âœ… API integration with axios
   - âœ… Proper data flow and state management
   - âœ… Beautiful UI with satisfaction rating visualization (1-100 scale)
   - âœ… Export functionality (CSV)

2. **Backend (Go)**:
   - âœ… Complete Gin router setup with all required endpoints
   - âœ… SQLite database integration with GORM
   - âœ… Advanced heuristic-based prediction algorithm with similarity-based learning
   - âœ… Perfect score decay logic to prevent getting stuck on outdated results
   - âœ… Target-based prediction model for accurate learning

3. **Data Structure**:
   - âœ… Frontend expects: `{id, date, showerDuration, averageTemperature, heatingTime, satisfaction}`
   - âœ… Backend uses SQLite with proper GORM models
   - âœ… Satisfaction scale: 1-100 (50 = perfect)

## Key Features Implemented

### Advanced Heuristic-Based Prediction Algorithm
- **Similarity-based learning**: Finds records with similar temperature (Â±2Â°C) and duration (Â±3 minutes)
- **Weighted learning**: Considers recency (2x weight for recent records), similarity, and frequency
- **2xÂ² scaling**: Uses 2xÂ² function centered at satisfaction=50 for aggressive learning curve
- **Pattern recognition**: Detects consecutive extreme feedback for enhanced learning
- **Contextual learning**: Understands feedback progression and adjusts aggressiveness based on learning history
- **Perfect score attraction**: Gives extra weight to satisfaction=50 results
- **Perfect score decay**: Reduces weight of "perfect" scores if contradicted by newer data
- **Target-based prediction**: Calculates target times from historical records instead of small adjustments

### API Endpoints (All Working)
- `POST /api/calculate` - Calculate heating time with heuristic algorithm
- `POST /api/feedback` - Save user feedback
- `GET /api/history` - Get all records
- `POST /api/history/delete` - Delete specific record
- `POST /api/history/deleteall` - Delete all records
- `GET /api/history/export` - Export CSV

### Recent Algorithm Improvements
1. **2xÂ² scaling**: Aggressive 2xÂ² learning curve centered at satisfaction=50
2. **Improved base prediction**: More realistic starting values (19.9min for 22Â°C, 20min shower)
3. **Pattern recognition**: Detects consecutive extreme feedback (hot/cold) for enhanced learning
4. **Contextual learning**: Understands feedback progression and becomes more aggressive when users remain dissatisfied
5. **Symmetric learning**: Equal aggressiveness for both hot and cold extreme feedback
6. **Faster convergence**: Reaches optimal heating time in 1-2 attempts instead of 3-5
7. **Perfect score handling**: Attracts predictions toward proven perfect results
8. **Decay mechanism**: Prevents getting stuck on outdated "perfect" scores
9. **1-100 satisfaction scale**: More granular feedback for better learning

## Technical Architecture

### Backend Structure
```
backend/
â”œâ”€â”€ cmd/server/main.go          # Application entry point
â”œâ”€â”€ internal/
â”‚   â”œâ”€â”€ handler/record_handler.go    # HTTP request handlers
â”‚   â”œâ”€â”€ models/record.go             # Database models
â”‚   â”œâ”€â”€ routes/router.go             # Route definitions
â”‚   â””â”€â”€ services/
â”‚       â”œâ”€â”€ prediction_service.go    # Advanced ML algorithm
â”‚       â””â”€â”€ record_service.go        # Database operations
â”œâ”€â”€ pkg/database/database.go         # Database connection
â””â”€â”€ data.db                          # SQLite database
```

### Frontend Structure
```
frontend/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ InputForm.vue           # Data input and feedback
â”‚   â”‚   â”œâ”€â”€ LatestResult.vue        # Current prediction display
â”‚   â”‚   â””â”€â”€ HistoryList.vue         # Historical data visualization
â”‚   â”œâ”€â”€ plugins/api.js              # API integration
â”‚   â””â”€â”€ main.js                     # Vue app entry point
â””â”€â”€ index.html                      # Main HTML file
```

## Development Status

### âœ… Completed (Phase 1 & 2)
- Database setup and integration
- All API endpoints implemented and tested
- Advanced heuristic-based prediction algorithm
- Frontend-backend integration
- CORS configuration
- Error handling and validation
- CSV export functionality
- Perfect score decay logic
- Target-based prediction model

### ðŸ”„ Next Steps (Phase 3 & 4)
- Weather integration (fake data generation)
- Model accuracy tracking
- **Machine Learning Integration**: Add actual ML models (linear regression, random forest) to complement heuristic system
- User authentication
- Production deployment

## Key Technical Decisions

1. **Web Framework**: Gin for routing and HTTP handling
2. **Database**: SQLite for simplicity (can migrate to PostgreSQL later)
3. **Prediction Algorithm**: Advanced heuristic-based system with similarity matching and quadratic scaling
4. **Frontend**: Vue 3 with Options API for simplicity
5. **Satisfaction Scale**: 1-100 for granular feedback (50 = perfect)
6. **Learning Model**: Target-based prediction with quadratic scaling for fast convergence

## Testing Results
The heuristic-based algorithm has been extensively tested and shows:
- **Aggressive learning from feedback**: 2xÂ² scaling responds very aggressively to satisfaction < 30 or > 70
- **Improved base predictions**: 19.9 minutes for 22Â°C, 20min shower (vs previous 11.8 minutes)
- **Pattern recognition**: Detects consecutive extreme feedback and applies 1.5x-2.5x learning boost
- **Contextual learning**: Understands feedback progression and becomes more aggressive when users remain dissatisfied
- **Symmetric behavior**: Equal learning speed for both hot and cold extreme feedback
- **Very fast convergence**: Reaches optimal heating time in 1-2 attempts
- **Proper handling of perfect scores**: With decay mechanism to prevent getting stuck
- **Robust similarity matching**: And weighting for reliable predictions

## Notes
- **Frontend**: Production-ready with beautiful UI and proper data handling
- **Backend**: Robust, scalable architecture with advanced heuristic-based prediction capabilities
- **Algorithm**: Sophisticated heuristic system with quadratic scaling and pattern recognition that adapts quickly to user preferences
- **Integration**: Seamless frontend-backend communication
- **Future**: Ready for weather integration and actual machine learning models
description:
globs:
alwaysApply: true
---
