# Frontend (Vue 3) - Heat-Logger

## Overview
A Vue 3 application with Options API that provides an intuitive interface for the Heat-Logger system. Features a beautiful UI for inputting shower data, viewing predictions, and managing historical records.

## Current State: Production Ready ‚úÖ

### Architecture
- **Framework**: Vue 3 with Options API
- **Build Tool**: Vite for fast development and building
- **Styling**: SCSS with modern CSS features
- **HTTP Client**: Axios for API communication
- **Icons**: Font Awesome for UI icons

## Key Components

### 1. InputForm (`src/components/InputForm.vue`)
**Two-stage form for data input and feedback:**

#### Stage 1: Data Input
- **Temperature input**: Number field with step 0.1
- **Duration input**: Number field with step 0.5
- **Validation**: Required fields with proper constraints
- **Calculate button**: Triggers ML prediction

#### Stage 2: Feedback Collection
- **Current values display**: Shows entered data and prediction
- **Satisfaction rating**: 1-100 scale input (50 = perfect)
- **Help text**: "1 = too cold, 50 = perfect, 100 = too hot"
- **Submit/Cancel buttons**: Save feedback or reset form

#### Features
- **UUID generation**: Automatic ID creation for new records
- **Date handling**: Automatic timestamp creation
- **Form validation**: Client-side validation with helpful messages
- **Responsive design**: Works on desktop and mobile

### 2. LatestResult (`src/components/LatestResult.vue`)
**Displays current prediction results:**

#### Features
- **Prediction display**: Shows calculated heating time
- **Loading states**: Visual feedback during API calls
- **Error handling**: Displays error messages gracefully
- **Success animations**: Visual confirmation of successful predictions

### 3. HistoryList (`src/components/HistoryList.vue`)
**Comprehensive historical data visualization:**

#### Data Display
- **Record cards**: Individual cards for each historical entry
- **Date formatting**: Human-readable date display
- **Data organization**: Temperature, duration, heating time, satisfaction

#### Satisfaction Visualization
- **Visual scale**: Cold (‚ùÑÔ∏è) to Hot (üî•) indicator
- **Dynamic positioning**: Satisfaction bar with precise positioning
- **Color coding**: 
  - Cold: < 40 (blue)
  - Perfect: 40-60 (green)
  - Hot: > 60 (red)
- **1-100 scale**: Updated from old 1-10 scale for granular feedback

#### Interactive Features
- **Delete functionality**: Remove individual records
- **Delete all**: Bulk deletion with confirmation
- **CSV export**: Download historical data
- **Sorting**: Most recent records first

## API Integration (`src/plugins/api.js`)

### Axios Configuration
```javascript
import axios from 'axios'

const api = axios.create({
  baseURL: 'http://localhost:8080/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
})
```

### API Methods
- `calculate(data)` - Get heating time prediction
- `submitFeedback(data)` - Save user feedback
- `getHistory()` - Retrieve all records
- `deleteRecord(id)` - Delete specific record
- `deleteAllRecords()` - Delete all records
- `exportHistory()` - Download CSV file

## Styling System

### SCSS Structure
- **Component-scoped styles**: Each component has its own styles
- **Modern CSS features**: Grid, Flexbox, CSS variables
- **Responsive design**: Mobile-first approach
- **Consistent theming**: Color scheme and spacing

### Design Features
- **Clean interface**: Minimalist design with clear hierarchy
- **Visual feedback**: Hover states, loading indicators
- **Accessibility**: Proper contrast ratios and focus states
- **Modern aesthetics**: Rounded corners, shadows, smooth transitions

## Data Flow

### State Management
- **Component props**: Parent-child data passing
- **Event emission**: Child-to-parent communication
- **Local state**: Component-specific data management
- **API state**: Loading, success, error states

### User Journey
1. **Input data**: User enters temperature and duration
2. **Get prediction**: System calculates optimal heating time
3. **Use prediction**: User follows the suggested heating time
4. **Provide feedback**: User rates satisfaction (1-100)
5. **View history**: User can review past predictions and feedback

## Recent Updates

### Satisfaction Scale Enhancement
- **Upgraded from 1-10 to 1-100 scale**: More granular feedback
- **Updated validation**: Frontend validation for new scale
- **Visual improvements**: Better satisfaction bar positioning
- **Help text updates**: Clear guidance for new scale

### UI Improvements
- **Better error handling**: More informative error messages
- **Loading states**: Improved visual feedback
- **Responsive design**: Better mobile experience
- **Accessibility**: Enhanced keyboard navigation

## Development Setup

### Prerequisites
```bash
Node.js >= 16
npm >= 8
```

### Installation
```bash
cd frontend
npm install
```

### Development Commands
```bash
# Start development server
npm run dev

# Build for production
npm run build

# Preview production build
npm run preview
```

### Configuration
- **Vite config**: Optimized for Vue 3
- **Environment variables**: API endpoint configuration
- **Hot reload**: Fast development experience

## Testing Status
- ‚úÖ All components working correctly
- ‚úÖ API integration tested and functional
- ‚úÖ 1-100 satisfaction scale implemented
- ‚úÖ Responsive design verified
- ‚úÖ Error handling tested
- ‚úÖ CSV export working

## Browser Support
- **Modern browsers**: Chrome, Firefox, Safari, Edge
- **Mobile browsers**: iOS Safari, Chrome Mobile
- **Progressive enhancement**: Graceful degradation for older browsers

## Notes
- **Vue 3**: Latest Vue version with Composition API available
- **Options API**: Chosen for simplicity and team familiarity
- **SCSS**: Advanced styling with variables and mixins
- **Axios**: Reliable HTTP client with good error handling
- **Production Ready**: All features implemented and tested
- **Scalable**: Clean architecture ready for additional features
description:
globs:
alwaysApply: false
---
