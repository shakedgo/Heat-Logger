# Heat-Logger Project

## Overview
A smart heating time prediction system that learns from user feedback to optimize shower heating times. The system uses machine learning to predict optimal heating times based on temperature, shower duration, and historical user satisfaction data.

## Current State: Phase 2 Complete ✅

### What We Have:
1. **Frontend (Vue 3 + Options API)**:
   - ✅ Complete UI with InputForm, LatestResult, HistoryList components
   - ✅ API integration with axios
   - ✅ Proper data flow and state management
   - ✅ Beautiful UI with satisfaction rating visualization (1-100 scale)
   - ✅ Export functionality (CSV)

2. **Backend (Go)**:
   - ✅ Complete Gin router setup with all required endpoints
   - ✅ SQLite database integration with GORM
   - ✅ Advanced ML prediction algorithm with similarity-based learning
   - ✅ Perfect score decay logic to prevent getting stuck on outdated results
   - ✅ Target-based prediction model for accurate learning

3. **Data Structure**:
   - ✅ Frontend expects: `{id, date, showerDuration, averageTemperature, heatingTime, satisfaction}`
   - ✅ Backend uses SQLite with proper GORM models
   - ✅ Satisfaction scale: 1-100 (50 = perfect)

## Key Features Implemented

### Advanced Prediction Algorithm
- **Similarity-based learning**: Finds records with similar temperature (±2°C) and duration (±3 minutes)
- **Weighted learning**: Considers recency (2x weight for recent records), similarity, and frequency
- **Perfect score attraction**: Gives extra weight to satisfaction=50 results
- **Perfect score decay**: Reduces weight of "perfect" scores if contradicted by newer data
- **Target-based prediction**: Calculates target times from historical records instead of small adjustments

### API Endpoints (All Working)
- `POST /api/calculate` - Calculate heating time with ML
- `POST /api/feedback` - Save user feedback
- `GET /api/history` - Get all records
- `POST /api/history/delete` - Delete specific record
- `POST /api/history/deleteall` - Delete all records
- `GET /api/history/export` - Export CSV

### Recent Algorithm Improvements
1. **Fixed learning speed**: Target-based prediction learns much faster from feedback
2. **Perfect score handling**: Attracts predictions toward proven perfect results
3. **Decay mechanism**: Prevents getting stuck on outdated "perfect" scores
4. **1-100 satisfaction scale**: More granular feedback for better learning

## Technical Architecture

### Backend Structure
```
backend/
├── cmd/server/main.go          # Application entry point
├── internal/
│   ├── handler/record_handler.go    # HTTP request handlers
│   ├── models/record.go             # Database models
│   ├── routes/router.go             # Route definitions
│   └── services/
│       ├── prediction_service.go    # Advanced ML algorithm
│       └── record_service.go        # Database operations
├── pkg/database/database.go         # Database connection
└── data.db                          # SQLite database
```

### Frontend Structure
```
frontend/
├── src/
│   ├── components/
│   │   ├── InputForm.vue           # Data input and feedback
│   │   ├── LatestResult.vue        # Current prediction display
│   │   └── HistoryList.vue         # Historical data visualization
│   ├── plugins/api.js              # API integration
│   └── main.js                     # Vue app entry point
└── index.html                      # Main HTML file
```

## Development Status

### ✅ Completed (Phase 1 & 2)
- Database setup and integration
- All API endpoints implemented and tested
- Advanced ML prediction algorithm
- Frontend-backend integration
- CORS configuration
- Error handling and validation
- CSV export functionality
- Perfect score decay logic
- Target-based prediction model

### 🔄 Next Steps (Phase 3 & 4)
- Weather integration (fake data generation)
- Model accuracy tracking
- Advanced ML models (polynomial regression, etc.)
- User authentication
- Production deployment

## Key Technical Decisions

1. **Web Framework**: Gin for routing and HTTP handling
2. **Database**: SQLite for simplicity (can migrate to PostgreSQL later)
3. **ML Algorithm**: Advanced similarity-based learning with perfect score handling
4. **Frontend**: Vue 3 with Options API for simplicity
5. **Satisfaction Scale**: 1-100 for granular feedback (50 = perfect)
6. **Learning Model**: Target-based prediction for fast convergence

## Testing Results
The algorithm has been extensively tested and shows:
- Fast learning from user feedback
- Accurate convergence to optimal heating times
- Proper handling of perfect scores with decay
- Robust similarity matching and weighting

## Notes
- **Frontend**: Production-ready with beautiful UI and proper data handling
- **Backend**: Robust, scalable architecture with advanced ML capabilities
- **Algorithm**: Sophisticated learning system that adapts quickly to user preferences
- **Integration**: Seamless frontend-backend communication
- **Future**: Ready for weather integration and advanced ML models

## CRITICAL SAFETY RULE: FILE PROTECTION

### ⚠️ NO FILE DELETION POLICY
**NEVER delete any files in this project unless explicitly requested by the user.**

### File Protection Guidelines:
1. **NEVER use `delete_file` tool** unless the user specifically asks for file deletion
2. **ALWAYS use `search_replace` or `edit_file`** for code modifications
3. **If a file seems corrupted or needs replacement**, use `search_replace` to fix it instead of deletion
4. **For major refactoring**, create new files and then ask user permission before removing old ones
5. **If you accidentally delete a file**, immediately inform the user and help restore it using git

### Safe Code Modification Practices:
- Use `search_replace` for targeted changes
- Use `edit_file` for adding new content or complete rewrites
- Use `read_file` to understand current file state before making changes
- Always test changes before suggesting deletion of any files

### Emergency Recovery:
If a file is accidentally deleted:
1. **Immediately stop** any further modifications
2. **Inform the user** about the deletion
3. **Use git commands** to restore the file: `git checkout -- <filename>`
4. **Verify restoration** by reading the file
5. **Continue with safe modifications** using `search_replace` or `edit_file`

This rule is critical to prevent data loss and maintain project integrity.
description:
globs:
alwaysApply: true
---
