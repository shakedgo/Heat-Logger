# Backend (Go) - Heat-Logger

## Overview
The backend is a Go application using Gin framework with an advanced heuristic-based prediction system for heating time optimization.

## Current State: Production Ready ✅

### Architecture
- **Framework**: Gin for HTTP routing and middleware
- **Database**: SQLite with GORM ORM
- **ML Algorithm**: Advanced similarity-based learning with perfect score handling
- **Validation**: Comprehensive input validation and error handling
- **CORS**: Configured for frontend integration

## Key Components

### 1. Prediction Service (`internal/services/prediction_service.go`)
**Advanced Heuristic-Based Algorithm with the following features:**

#### Core Algorithm
- **Target-based prediction**: Calculates target times from historical records
- **Similarity matching**: Finds records within ±2°C temperature and ±3 minutes duration
- **Weighted learning**: Considers recency (2x weight), similarity, and frequency
- **Quadratic scaling**: Uses x² function centered at satisfaction=50 for natural learning curve
- **Pattern recognition**: Detects consecutive extreme feedback for enhanced learning
- **Heuristic-based adjustments**: Rule-based system with mathematical formulas for learning

#### Perfect Score Handling
- **Perfect score attraction**: Gives extra weight to satisfaction=50 results
- **Perfect score decay**: Reduces weight if contradicted by newer data
- **Decay formula**: `0.5 - (satisfactionDrop/100.0) - (attemptCount * 0.1)`

#### Learning Logic
```go
// Quadratic scaling centered at satisfaction=50
x := record.Satisfaction - 50.0
normalizedX := x / 50.0
quadraticFactor := math.Pow(math.Abs(normalizedX), 2.0)

// Pattern recognition for consecutive extreme feedback
if consecutiveCold >= 3 {
    coldBoost = 1.5 + (consecutiveCold * 0.2) // 1.5x to 2.5x boost
}

// Adjustment calculation
if x < 0 {
    // Cold feedback - increase heating time
    adjustment = quadraticFactor * (heatingTime * 0.8) * coldBoost
} else {
    // Hot feedback - decrease heating time
    adjustment = -quadraticFactor * (heatingTime * 0.8) * hotBoost
}
```

### 2. Record Service (`internal/services/record_service.go`)
- **CRUD operations** for daily records
- **Prediction data retrieval** with configurable limits
- **Database operations** using GORM

### 3. Record Handler (`internal/handler/record_handler.go`)
**All API endpoints implemented:**

- `POST /api/calculate` - ML prediction with validation
- `POST /api/feedback` - Save user feedback with validation
- `GET /api/history` - Retrieve all records
- `POST /api/history/delete` - Delete specific record
- `POST /api/history/deleteall` - Delete all records
- `GET /api/history/export` - CSV export functionality

### 4. Database Models (`internal/models/record.go`)
```go
type DailyRecord struct {
    ID                 string    `json:"id" gorm:"primaryKey;type:varchar(36)"`
    Date               time.Time `json:"date" gorm:"not null"`
    ShowerDuration     float64   `json:"showerDuration" gorm:"not null"`
    AverageTemperature float64   `json:"averageTemperature" gorm:"not null"`
    HeatingTime        float64   `json:"heatingTime" gorm:"not null"`
    Satisfaction       float64   `json:"satisfaction" gorm:"not null"` // 1-100 scale
    CreatedAt          time.Time `json:"createdAt" gorm:"autoCreateTime"`
    UpdatedAt          time.Time `json:"updatedAt" gorm:"autoUpdateTime"`
}
```

### 5. Router (`internal/routes/router.go`)
- **CORS configuration** for frontend integration
- **Service initialization** and dependency injection
- **Route grouping** and middleware setup

## API Specifications

### Calculate Heating Time
```http
POST /api/calculate
Content-Type: application/json

{
  "duration": 15.5,
  "temperature": 22.0
}

Response: {"heatingTime": 10.8}
```

### Submit Feedback
```http
POST /api/feedback
Content-Type: application/json

{
  "id": "uuid-string",
  "date": "2024-01-15T10:30:00Z",
  "showerDuration": 15.5,
  "averageTemperature": 22.0,
  "heatingTime": 10.8,
  "satisfaction": 50  // 1-100 scale, 50 = perfect
}

Response: {"success": true, "message": "Feedback saved successfully"}
```

### Get History
```http
GET /api/history

Response: {"history": [array of DailyRecord objects]}
```

## Validation Rules

### Input Validation
- **Duration**: 1-60 minutes
- **Temperature**: -50 to 50°C
- **Satisfaction**: 1-100 (50 = perfect)

### Error Handling
- **400 Bad Request**: Invalid input data
- **404 Not Found**: Record not found
- **500 Internal Server Error**: Database/server errors
- **Consistent JSON error responses**

## Dependencies
```go
require (
    github.com/gin-gonic/gin v1.9.1
    github.com/gin-contrib/cors v1.4.0
    gorm.io/gorm v1.25.1
    gorm.io/driver/sqlite v1.5.1
    github.com/google/uuid v1.3.0
)
```

## Development Commands
```bash
# Run development server with hot reload
./run-dev.sh

# Build for production
go build -o tmp/main cmd/server/main.go

# Run tests
go test ./...
```

## Recent Improvements

### Algorithm Enhancements
1. **Target-based prediction**: Fixed slow learning by calculating target times instead of small adjustments
2. **Perfect score decay**: Prevents getting stuck on outdated perfect results
3. **1-100 satisfaction scale**: More granular feedback for better learning
4. **Similarity weighting**: Better handling of multiple similar records

### Performance Optimizations
- **Database queries**: Optimized with proper indexing
- **Memory usage**: Efficient record retrieval with limits
- **Response times**: Fast prediction calculations

## Testing Status
- ✅ All endpoints tested and working
- ✅ ML algorithm extensively tested with real user data
- ✅ Perfect score decay logic validated
- ✅ Target-based prediction showing fast convergence
- ✅ Frontend integration working seamlessly

## Notes
- **Database**: SQLite for development, ready for PostgreSQL migration
- **Algorithm**: Sophisticated ML system that learns quickly from user feedback
- **Scalability**: Clean architecture ready for additional features
- **Production Ready**: All core functionality implemented and tested
description:
globs:
alwaysApply: false
---
